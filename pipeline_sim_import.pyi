# pipeline_sim_import.pyi
# Type stub file for pipeline_sim_import module
# Place this file in the same directory as pipeline_sim_import.py

from typing import Dict, Any, Optional

# Enums
class NodeType:
    JUNCTION: int
    SOURCE: int
    SINK: int
    PUMP: int
    COMPRESSOR: int
    VALVE: int
    SEPARATOR: int
    HEAT_EXCHANGER: int

# Classes
class Node:
    def __init__(self, id: str, type: NodeType) -> None: ...
    def id(self) -> str: ...
    def type(self) -> NodeType: ...
    def pressure(self) -> float: ...
    def set_pressure(self, p: float) -> None: ...
    def temperature(self) -> float: ...
    def set_temperature(self, T: float) -> None: ...
    def elevation(self) -> float: ...
    def set_elevation(self, z: float) -> None: ...
    def set_type(self, type: NodeType) -> None: ...
    def has_pressure_bc(self) -> bool: ...
    def pressure_bc(self) -> float: ...
    def set_pressure_bc(self, p: float) -> None: ...
    def remove_pressure_bc(self) -> None: ...
    def fixed_flow_rate(self) -> float: ...
    def set_fixed_flow_rate(self, q: float) -> None: ...

class Pipe:
    def __init__(self, id: str, upstream: Node, downstream: Node, 
                 length: float, diameter: float, roughness: float = ...) -> None: ...
    def id(self) -> str: ...
    def upstream(self) -> Node: ...
    def downstream(self) -> Node: ...
    def length(self) -> float: ...
    def diameter(self) -> float: ...
    def roughness(self) -> float: ...
    def set_roughness(self, e: float) -> None: ...
    def inclination(self) -> float: ...
    def set_inclination(self, angle: float) -> None: ...
    def flow_rate(self) -> float: ...
    def set_flow_rate(self, q: float) -> None: ...
    def velocity(self) -> float: ...
    def set_velocity(self, v: float) -> None: ...
    def area(self) -> float: ...
    def volume(self) -> float: ...
    def reynolds_number(self, density: float, viscosity: float) -> float: ...
    def friction_factor(self, reynolds: float) -> float: ...

class Network:
    def __init__(self) -> None: ...
    def add_node(self, id: str, type: NodeType) -> Node: ...
    def add_pipe(self, id: str, upstream: Node, downstream: Node,
                 length: float, diameter: float) -> Pipe: ...
    def get_node(self, id: str) -> Optional[Node]: ...
    def get_pipe(self, id: str) -> Optional[Pipe]: ...
    def nodes(self) -> Dict[str, Node]: ...
    def pipes(self) -> Dict[str, Pipe]: ...
    def set_pressure(self, node: Node, pressure: float) -> None: ...
    def set_flow_rate(self, node: Node, flow_rate: float) -> None: ...
    def pressure_specs(self) -> Dict[str, float]: ...
    def flow_specs(self) -> Dict[str, float]: ...
    def node_count(self) -> int: ...
    def pipe_count(self) -> int: ...
    def node_index(self, node_id: str) -> int: ...
    def pipe_index(self, pipe_id: str) -> int: ...
    def get_upstream_pipes(self, node: Node) -> list[Pipe]: ...
    def get_downstream_pipes(self, node: Node) -> list[Pipe]: ...
    def load_from_json(self, filename: str) -> None: ...
    def save_to_json(self, filename: str) -> None: ...
    def is_valid(self) -> bool: ...
    def clear(self) -> None: ...

class FluidProperties:
    oil_density: float
    gas_density: float
    water_density: float
    oil_viscosity: float
    gas_viscosity: float
    water_viscosity: float
    oil_fraction: float
    gas_fraction: float
    water_fraction: float
    oil_water_tension: float
    oil_gas_tension: float
    temperature: float
    pressure: float
    gas_oil_ratio: float
    water_cut: float
    bubble_point_pressure: float
    oil_formation_volume_factor: float
    gas_formation_volume_factor: float
    water_formation_volume_factor: float
    has_oil: bool
    has_gas: bool
    has_water: bool
    
    def __init__(self) -> None: ...
    def is_multiphase(self) -> bool: ...
    def mixture_density(self) -> float: ...
    def mixture_viscosity(self) -> float: ...
    def liquid_fraction(self) -> float: ...
    def update_pvt(self, pressure: float) -> None: ...
    def gas_z_factor(self, pressure: float, temperature: float) -> float: ...
    def oil_viscosity_at_pressure(self, pressure: float) -> float: ...

class SolverConfig:
    tolerance: float
    relaxation_factor: float
    max_iterations: int
    verbose: bool
    pressure_damping: float
    flow_damping: float
    adaptive_damping: bool
    use_previous_solution: bool
    min_pressure: float
    max_pressure: float
    min_flow_velocity: float
    jacobian_epsilon: float
    laminar_transition_Re: float
    critical_zone_factor: float
    enable_laminar_correction: bool

class SolutionResults:
    converged: bool
    iterations: int
    residual: float
    computation_time: float
    node_pressures: Dict[str, float]
    node_temperatures: Dict[str, float]
    node_mass_imbalance: Dict[str, float]
    pipe_flow_rates: Dict[str, float]
    pipe_velocities: Dict[str, float]
    pipe_pressure_drops: Dict[str, float]
    pipe_reynolds_numbers: Dict[str, float]
    pipe_friction_factors: Dict[str, float]
    max_mass_imbalance: float
    average_iterations_per_pipe: float
    
    def pressure_drop(self, pipe: Pipe) -> float: ...
    def outlet_pressure(self, pipe: Pipe) -> float: ...

class SteadyStateSolver:
    def __init__(self, network: Network, fluid: FluidProperties) -> None: ...
    def solve(self) -> SolutionResults: ...
    def reset(self) -> None: ...
    def set_config(self, config: SolverConfig) -> None: ...
    @property
    def config(self) -> SolverConfig: ...

class constants:
    STANDARD_PRESSURE: float = 101325.0
    STANDARD_TEMPERATURE: float = 288.15
    GRAVITY: float = 9.81
    GAS_CONSTANT: float = 8.314

def get_version() -> str: ...
def load_pipeline_sim() -> Any: ...

# Module level exports
pipeline_sim: Any