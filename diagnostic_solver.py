"""
Fix for Pylance import errors in VS Code
"""

# Option 1: Type stubs file (pipeline_sim_import.pyi)
# Create this file in the same directory as pipeline_sim_import.py

# pipeline_sim_import.pyi
from typing import Any, Dict, List, Tuple

class NodeType:
    JUNCTION: int
    SOURCE: int
    SINK: int
    PUMP: int
    COMPRESSOR: int
    VALVE: int
    SEPARATOR: int
    HEAT_EXCHANGER: int

class Node:
    def __init__(self, id: str, type: NodeType) -> None: ...
    def id(self) -> str: ...
    def type(self) -> NodeType: ...
    def pressure(self) -> float: ...
    def set_pressure(self, p: float) -> None: ...
    def temperature(self) -> float: ...
    def set_temperature(self, T: float) -> None: ...
    def elevation(self) -> float: ...
    def set_elevation(self, z: float) -> None: ...

class Pipe:
    def __init__(self, id: str, upstream: Node, downstream: Node, 
                 length: float, diameter: float, roughness: float = 0.000045) -> None: ...
    def id(self) -> str: ...
    def upstream(self) -> Node: ...
    def downstream(self) -> Node: ...
    def length(self) -> float: ...
    def diameter(self) -> float: ...
    def roughness(self) -> float: ...
    def flow_rate(self) -> float: ...
    def velocity(self) -> float: ...

class Network:
    def __init__(self) -> None: ...
    def add_node(self, id: str, type: NodeType) -> Node: ...
    def add_pipe(self, id: str, upstream: Node, downstream: Node,
                 length: float, diameter: float) -> Pipe: ...
    def get_node(self, id: str) -> Node: ...
    def get_pipe(self, id: str) -> Pipe: ...
    def set_pressure(self, node: Node, pressure: float) -> None: ...
    def set_flow_rate(self, node: Node, flow_rate: float) -> None: ...
    def node_count(self) -> int: ...
    def pipe_count(self) -> int: ...

class FluidProperties:
    oil_density: float
    gas_density: float
    water_density: float
    oil_viscosity: float
    gas_viscosity: float
    water_viscosity: float
    oil_fraction: float
    gas_fraction: float
    water_fraction: float
    
    def __init__(self) -> None: ...
    def mixture_density(self) -> float: ...
    def mixture_viscosity(self) -> float: ...

class SolverConfig:
    tolerance: float
    max_iterations: int
    verbose: bool
    
class SolutionResults:
    converged: bool
    iterations: int
    residual: float
    computation_time: float
    node_pressures: Dict[str, float]
    pipe_flow_rates: Dict[str, float]
    pipe_velocities: Dict[str, float]
    pipe_pressure_drops: Dict[str, float]
    pipe_reynolds_numbers: Dict[str, float]
    pipe_friction_factors: Dict[str, float]

class SteadyStateSolver:
    def __init__(self, network: Network, fluid: FluidProperties) -> None: ...
    def solve(self) -> SolutionResults: ...
    def set_config(self, config: SolverConfig) -> None: ...
    @property
    def config(self) -> SolverConfig: ...

class constants:
    STANDARD_PRESSURE: float
    STANDARD_TEMPERATURE: float
    GRAVITY: float
    GAS_CONSTANT: float

def get_version() -> str: ...

# Export everything
pipeline_sim: Any